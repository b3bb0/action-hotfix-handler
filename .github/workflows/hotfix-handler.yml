name: ‚ôªÔ∏è Hotfix Handler

on:
  workflow_call:
    inputs:
      pr_number:
        type: number
        required: true
      pr_title:
        type: string
        required: true
      source_branch:
        type: string
        required: true
      merge_mode:
        type: string
        required: false
        default: 'ff'
      tag:
        type: string
        required: false
        default: ''
      branches:
        type: string
        required: false
        default: 'staging,qa,dev'
        description: "Comma-separated downstream branches (e.g. staging,qa,dev)"

jobs:
  hotfix:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üß∞ Set Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: üîç Detect default branch from git remote
        id: detect_default
        run: |
          DEFAULT_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT

      - name: üß™ Parse downstream branches
        id: parsed
        run: |
          IFS=',' read -ra BRANCHES <<< "${{ inputs.branches }}"
          JSON_ARRAY=$(printf '"%s",' "${BRANCHES[@]}" | sed 's/,$//')
          echo "branches=[$JSON_ARRAY]" >> $GITHUB_OUTPUT

      - name: üõë Validate hotfix is based on default branch
        id: basecheck
        run: |
          git fetch origin
          BASE=$(git merge-base origin/${{ inputs.source_branch }} origin/${{ steps.detect_default.outputs.default_branch }})
          TIP=$(git rev-parse origin/${{ steps.detect_default.outputs.default_branch }})

          if [ "$BASE" != "$TIP" ]; then
            echo "invalid_base=true" >> $GITHUB_OUTPUT
          else
            echo "invalid_base=false" >> $GITHUB_OUTPUT
          fi

      - name: ‚ùå Comment if base branch invalid
        if: steps.basecheck.outputs.invalid_base == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ inputs.pr_number }}
          body: |
            ‚ùå This hotfix branch was not based on the latest `${{ steps.detect_default.outputs.default_branch }}`.
            Please rebase it and re-submit your pull request.

      - name: üß™ Validate promotion chain is linear
        id: chaincheck
        run: |
          git fetch origin
          MERGE_BASE=${{ steps.detect_default.outputs.default_branch }}
          BRANCHES=($(echo "${{ inputs.branches }}" | tr ',' ' '))
          for TARGET in "${BRANCHES[@]}"; do
            COMMON=$(git merge-base origin/$TARGET origin/$MERGE_BASE)
            BASE_TIP=$(git rev-parse origin/$MERGE_BASE)

            if [ "$COMMON" != "$BASE_TIP" ]; then
              echo "invalid_chain=$TARGET" >> $GITHUB_OUTPUT
              exit 0
            fi
            MERGE_BASE=$TARGET
          done

      - name: ‚ùå Comment if promotion chain is broken
        if: steps.chaincheck.outputs.invalid_chain != ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ inputs.pr_number }}
          body: |
            ‚ùå Invalid promotion chain:
            Branch `${{ steps.chaincheck.outputs.invalid_chain }}` is not based on the previous branch in the promotion sequence.
            Please align your branches with the expected order (default ‚ûú staging ‚ûú qa ‚ûú ...).

      - name: üß™ Dry-run merge through full chain
        id: dryrun
        run: |
          set -e
          git fetch origin
          MERGE_BASE=${{ steps.detect_default.outputs.default_branch }}
          BRANCHES=($(echo "${{ inputs.branches }}" | tr ',' ' '))

          git checkout -b dry-$MERGE_BASE origin/$MERGE_BASE
          git merge --no-commit --no-ff origin/${{ inputs.source_branch }} || echo "error_branch=$MERGE_BASE" >> $GITHUB_OUTPUT

          for TARGET in "${BRANCHES[@]}"; do
            git checkout -b dry-$TARGET origin/$TARGET
            git merge --no-commit --no-ff dry-$MERGE_BASE || echo "error_branch=$TARGET" >> $GITHUB_OUTPUT
            MERGE_BASE=$TARGET
          done
        continue-on-error: true

      - name: ‚ùå Comment if dry-run fails
        if: steps.dryrun.outputs.error_branch != ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ inputs.pr_number }}
          body: |
            ‚ùå Merge conflict detected in `${{ steps.dryrun.outputs.error_branch }}`.
            Please resolve the conflict before this hotfix can be merged.

      - name: ‚úÖ Real merge & push
        if: steps.dryrun.outputs.error_branch == '' && steps.chaincheck.outputs.invalid_chain == ''
        run: |
          git fetch origin
          MERGE_BASE=${{ steps.detect_default.outputs.default_branch }}
          BRANCHES=($(echo "${{ inputs.branches }}" | tr ',' ' '))

          git checkout $MERGE_BASE
          git reset --hard origin/$MERGE_BASE

          if [ "${{ inputs.merge_mode }}" = "no-ff" ]; then
            git merge --no-ff origin/${{ inputs.source_branch }} -m "Hotfix: ${{ inputs.pr_title }}"
          else
            git merge --ff-only origin/${{ inputs.source_branch }}
          fi
          git push origin $MERGE_BASE

          for TARGET in "${BRANCHES[@]}"; do
            git checkout $TARGET
            git pull origin $TARGET
            git merge $MERGE_BASE
            git push origin $TARGET
            MERGE_BASE=$TARGET
          done

      - name: üè∑ Push tag (if specified)
        if: steps.dryrun.outputs.error_branch == '' && inputs.tag != ''
        run: |
          git tag -a "${{ inputs.tag }}" -m "Hotfix: ${{ inputs.tag }}"
          git push origin "${{ inputs.tag }}"
